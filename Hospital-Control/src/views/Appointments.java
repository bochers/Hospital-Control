package views;

import classes.Person;
import java.util.*;
import classes.Database;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.management.StringValueExp;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author isaac
 */
public class Appointments extends javax.swing.JFrame {

    Database d;
    DefaultTableModel tb;
    SimpleDateFormat dFormat = new SimpleDateFormat("dd-MM-yyyy");
    ArrayList<Person> apt;
    //String uType;

    /**
     * Creates new form Appointments
     */
    @SuppressWarnings("unchecked")
    public Appointments() {

        initComponents();
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnSearch.setEnabled(false);
        searchPatientNameTxt.setEnabled(false);
        btnClose.setEnabled(false);
        dateChooser.setEnabled(false);
        idText.setEnabled(false);
        hourComboBox.setEnabled(false);
        patientNameTxt.setEnabled(false);
        stateComboBox.setEnabled(false);
        Date date = new Date();
        createColumns();
        this.setLocationRelativeTo(null);
        d = new Database();
        apt = d.getAppointments();

        for (Person a : apt) {
            System.out.println(a.getName());
            fillRow(a);
        }

        //uType = userType;
        /*tb = new DefaultTableModel();
        tb.setColumnIdentifiers(columns);
        jTappointment.setModel(tb);
        //idText.setEnabled(false);*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTappointment = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        hourComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        searchPatientNameTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        stateComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        patientNameTxt = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("ID:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        jTappointment.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTappointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTappointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTappointmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTappointment);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 780, 90));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/little_imms.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, 110, 130));
        jPanel1.add(dateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 160, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Paciente: ");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 60, 10));

        hourComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7:00-8:00 AM", "8:00-9:00 AM", "9:00-10:00 AM", "10:00-11:00 AM", "11:00-12:00 PM", "12:00-13:00 PM", "13:00-14:00 PM", "16:00-17:00 PM", "17:00-18:00 PM", " " }));
        hourComboBox.setSelectedIndex(-1);
        hourComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(hourComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 120, 20));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Hora cita:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 60, 20));

        searchPatientNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPatientNameTxtActionPerformed(evt);
            }
        });
        jPanel1.add(searchPatientNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 230, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Fecha:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        idText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextActionPerformed(evt);
            }
        });
        jPanel1.add(idText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 80, 30));

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSearch.setText("Buscar");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 20, 80, 30));

        stateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Inactivo" }));
        stateComboBox.setSelectedIndex(-1);
        stateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(stateComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 180, 90, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Estado:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate.setText("Actualizar");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 180, -1, 30));

        patientNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNameTxtActionPerformed(evt);
            }
        });
        jPanel1.add(patientNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 130, 270, 30));

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSave.setText("Guardar");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 180, -1, 30));
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 800, 290));

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancel.setText("Eliminar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, -1, 30));

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnBack.setText("Regresar al men√∫");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jPanel1.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 0, 130, 40));

        btnNuevo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel1.add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 180, 100, -1));

        btnClose.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnClose.setText("Cancelar");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        jPanel1.add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 180, 100, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/fondoGris.jpg"))); // NOI18N
        jLabel2.setToolTipText("");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 500));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 500));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //
    public void createColumns() {

        tb = (DefaultTableModel) jTappointment.getModel();
        tb.addColumn("Nombre");
        tb.addColumn("Hora de cita");
        tb.addColumn("Estado actual de cita");
        tb.addColumn("Fecha de cita");
        tb.addColumn("Id");

    }

    public void fillRows(String name, String hour, String state, String auxdate, int id) {

        String dateFromDateChooser = dFormat.format(dateChooser.getDate());
        dateFromDateChooser = auxdate;

        String[] rowData = {name, hour, state, auxdate, String.valueOf(id)};

        tb.addRow(rowData);

    }

    public void fillRow(Person p) {
        String name = p.getName();
        String hour = p.getHour();
        String state = p.getState();
        String auxdate = p.getDate();
        int id = p.getID();
//        String dateFromDateChooser = dFormat.format(dateChooser.getDate());
//        dateFromDateChooser = auxdate;

        String[] rowData = {name, hour, state, auxdate, String.valueOf(id)};

        tb.addRow(rowData);

    }

    public void displayAppointment(Person person) {

        if (person.getID() != 0) {
            try {
                idText.setText(String.valueOf(person.getID()));
                patientNameTxt.setText(person.getName());
                hourComboBox.setSelectedItem(person.getHour());
                stateComboBox.setSelectedItem(person.getStateAppointment());
                Date date = dFormat.parse(person.getDate());

            } catch (ParseException ex) {
                Logger.getLogger(Patients.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error");
        }
    }

    public int autoId() {
        int size = d.appointmentSize();
        size++;
        return size;
    }

    public void clearTxt() {
        patientNameTxt.setText("");
        searchPatientNameTxt.setText("");
        hourComboBox.setSelectedIndex(-1);
        stateComboBox.setSelectedIndex(-1);
        dateChooser.setDate(null);

    }

    public Person createApointment(Person p) {

        p.setID(Integer.parseInt(idText.getText()));
        p.setHour((String) hourComboBox.getSelectedItem());
        p.setName(patientNameTxt.getText());
        p.setStateAppointment((String) stateComboBox.getSelectedItem());
        p.setDate(dFormat.format(dateChooser.getDate()));

        return p;

    }

    public boolean isValidAppointment() {
        boolean valid = false;
        if (patientNameTxt.getText().length() > 0) {
            if (hourComboBox.getSelectedIndex() != -1) {
                if (stateComboBox.getSelectedIndex() != -1) {
                    if (dateChooser.getDate() != null) {
                        valid = true;

                    } else {
                        JOptionPane.showMessageDialog(null, "Error en Fecha de cita");
                        dateChooser.requestFocusInWindow();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error en Estado de cita");
                    stateComboBox.requestFocusInWindow();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error en Hora");
                hourComboBox.requestFocusInWindow();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error en Nombre del paciente");
            patientNameTxt.requestFocusInWindow();
        }

        return valid;
    }


    private void idTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTextActionPerformed

    private void stateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stateComboBoxActionPerformed

    private void hourComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hourComboBoxActionPerformed

    private void patientNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNameTxtActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        String dateFromDateChooser = dFormat.format(dateChooser.getDate());
        String aux = dateFromDateChooser;
        String hours = (String) hourComboBox.getSelectedItem();

        String auxId = String.valueOf(autoId());
        idText.setText(auxId);

        if (isValidAppointment()) {
            if (d.verifyAppointment(dateFromDateChooser, hours) == true) {
                Person p = new Person();
                fillRows(patientNameTxt.getText(),
                        (String) hourComboBox.getSelectedItem(),
                        (String) stateComboBox.getSelectedItem(),
                        dFormat.format(dateChooser.getDate()),
                        Integer.parseInt(idText.getText()));

                JOptionPane.showMessageDialog(null, "Guardado con √©xito.");
                d.newAppointment(createApointment(p));
                clearTxt();

            } else {
                JOptionPane.showMessageDialog(null, "Imposible realizar cita, por favor verifique su horario");
                stateComboBox.setSelectedItem("Inactivo");

            }

        }
    }//GEN-LAST:event_btnSaveActionPerformed
    ///Mostrar en pantalla la tabla
    private void jTappointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTappointmentMouseClicked
        // TODO add your handling code here:    
        patientNameTxt.setText((String) jTappointment.getValueAt(jTappointment.getSelectedRow(), 0));
        hourComboBox.setSelectedItem(jTappointment.getValueAt(jTappointment.getSelectedRow(), 1));
        stateComboBox.setSelectedItem(jTappointment.getValueAt(jTappointment.getSelectedRow(), 2));
        //dateChooser.setDate((Date) jTappointment.getValueAt(jTappointment.getSelectedRow(), 3));
        idText.setText((String) jTappointment.getValueAt(jTappointment.getSelectedRow(), 4));

    }//GEN-LAST:event_jTappointmentMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        String dateFromDateChooser = dFormat.format(dateChooser.getDate());
        String aux = dateFromDateChooser;
        String hours = (String) hourComboBox.getSelectedItem();

        if (jTappointment.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Datos insuficientes para actualizar.");
        } else {
            if (d.verifyAppointment(dateFromDateChooser, hours) == true && isValidAppointment() == true) {
                Person p = new Person();
                tb.setValueAt(patientNameTxt.getText(), jTappointment.getSelectedRow(), 0);
                tb.setValueAt(hourComboBox.getSelectedItem(), jTappointment.getSelectedRow(), 1);
                tb.setValueAt(stateComboBox.getSelectedItem(), jTappointment.getSelectedRow(), 3);
                tb.setValueAt(dFormat.format(dateChooser.getDate()), jTappointment.getSelectedRow(), 2);
                d.modifyPatient(createApointment(p));

                JOptionPane.showMessageDialog(null, "Modificado con √©xito.");
                clearTxt();
            } else {
                JOptionPane.showMessageDialog(null, "Imposible actualizar, revisar hora de la cita.");
            }

        }
//dateChooser.setDate(jTappointment.getValueAt(jTappointment.getSelectedRow(),2).toString());
        //idText.setText(jTappointment.getValueAt(jTappointment.getSelectedRow(), 3).toString());


    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        if (jTappointment.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Datos insuficientes para cancelar.");
        } else {
            tb.removeRow(jTappointment.getSelectedRow());
        }
        clearTxt();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        Person p;

        p = d.searchPatient(searchPatientNameTxt.getText());
        searchPatientNameTxt.setText(p.getName());
        if (p.getID() != 0) {
            patientNameTxt.setText(p.getName() + " " + p.getLast() + " " + p.getSLast());
            searchPatientNameTxt.setText(" ");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void searchPatientNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPatientNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchPatientNameTxtActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        //Navigation navigationWindow;
        //navigationWindow = new Navigation();
        //navigationWindow.show();
        //this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        btnSave.setEnabled(true);
        btnCancel.setEnabled(true);
        btnUpdate.setEnabled(true);
        btnSearch.setEnabled(true);
        searchPatientNameTxt.setEnabled(true);
        dateChooser.setEnabled(true);
        hourComboBox.setEnabled(true);
        stateComboBox.setEnabled(true);
        btnClose.setEnabled(true);
        idText.setText(String.valueOf(autoId()));

    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnSearch.setEnabled(false);
        searchPatientNameTxt.setEnabled(false);
        searchPatientNameTxt.setText(" ");
        dateChooser.setDate(null);
        idText.setText(" ");
        hourComboBox.setSelectedIndex(-1);
        stateComboBox.setSelectedIndex(-1);
        searchPatientNameTxt.setText(" ");
        dateChooser.setEnabled(false);
        idText.setEnabled(false);
        hourComboBox.setEnabled(false);
        patientNameTxt.setEnabled(false);
        stateComboBox.setEnabled(false);
        btnClose.setEnabled(false);

    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Appointments().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JComboBox<String> hourComboBox;
    private javax.swing.JTextField idText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTappointment;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JTextField searchPatientNameTxt;
    private javax.swing.JComboBox<String> stateComboBox;
    // End of variables declaration//GEN-END:variables
}
