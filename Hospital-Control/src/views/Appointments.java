package views;

import classes.Person;
import java.util.*;
import classes.Database;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.management.StringValueExp;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author isaac
 */
public class Appointments extends javax.swing.JFrame {

    Database d;
    String uType;
    DefaultTableModel tb;
    SimpleDateFormat dFormat = new SimpleDateFormat("dd-MM-yyyy");
    ArrayList<Person> apt;
    //String uType;

    /**
     * Creates new form Appointments
     *
     * @param userType
     */
    @SuppressWarnings("unchecked")
    public Appointments(String userType) {

        initComponents();
        uType = userType;
        btnSave.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnClose.setEnabled(false);
        dateChooser.setEnabled(false);
        idText.setEnabled(false);
        hourComboBox.setEnabled(false);
        searchComboBox.setEnabled(false);
        stateComboBox.setEnabled(false);
        Date date = new Date();
        createColumns();
        this.setLocationRelativeTo(null);
        d = new Database();
        apt = d.getAppointments();

        for (Person a : apt) {

            fillRow(a);
        }
        fillComboBox();
    }

    public Appointments() {

        initComponents();
        btnSave.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnClose.setEnabled(false);
        dateChooser.setEnabled(false);
        idText.setEnabled(false);
        hourComboBox.setEnabled(false);
        searchComboBox.setEnabled(false);
        stateComboBox.setEnabled(false);
        Date date = new Date();
        createColumns();
        this.setLocationRelativeTo(null);
        d = new Database();
        apt = d.getAppointments();

        for (Person a : apt) {

            fillRow(a);
        }

        fillComboBox();
        uType = "";
    }

    public void fillComboBox() {
        ArrayList<Person> patients = d.getPatients();
        searchComboBox.removeAllItems();
        patients.forEach((m) -> {
            searchComboBox.addItem(m.getName() + " " + m.getLast() + " " + m.getSLast());
        });
        searchComboBox.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTappointment = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        hourComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();
        stateComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        searchComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ID:");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 80, 30));

        jTappointment.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTappointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTappointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTappointmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTappointment);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 760, 230));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/little_imms.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 60, -1, 130));
        jPanel1.add(dateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 160, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Paciente: ");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 80, 30));

        hourComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "7:00-8:00 AM", "8:00-9:00 AM", "9:00-10:00 AM", "10:00-11:00 AM", "11:00-12:00 PM", "12:00-13:00 PM", "13:00-14:00 PM", "16:00-17:00 PM", "17:00-18:00 PM", " " }));
        hourComboBox.setSelectedIndex(-1);
        hourComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(hourComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 120, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Hora cita:");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 80, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Fecha:");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 80, 30));

        idText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextActionPerformed(evt);
            }
        });
        jPanel1.add(idText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 80, 30));

        stateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Inactivo" }));
        stateComboBox.setSelectedIndex(-1);
        stateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(stateComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 110, 90, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Estado:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, -1, -1));

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate.setText("Actualizar");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 450, 100, 30));

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSave.setText("Guardar");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 450, 100, 30));

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancel.setText("Eliminar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 100, 30));

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnBack.setText("Regresar");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jPanel1.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 20, -1, 30));

        btnNuevo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel1.add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 450, 100, 30));

        btnClose.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnClose.setText("Cancelar");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        jPanel1.add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 450, 100, 30));

        searchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(searchComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 240, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/fondoGris.jpg"))); // NOI18N
        jLabel2.setToolTipText("");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 500));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 500));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //
    public void createColumns() {

        tb = (DefaultTableModel) jTappointment.getModel();
        tb.addColumn("Nombre");
        tb.addColumn("Hora de cita");
        tb.addColumn("Estado actual de cita");
        tb.addColumn("Fecha de cita");
        tb.addColumn("Id");

    }

    public void fillRows(String name, String hour, String state, String auxdate, int id) {

        String dateFromDateChooser = dFormat.format(dateChooser.getDate());
        dateFromDateChooser = auxdate;

        String[] rowData = {name, hour, state, auxdate, String.valueOf(id)};

        tb.addRow(rowData);

    }

    public void fillRow(Person p) {
        String name = p.getName();
        String hour = p.getHour();
        String state = p.getStateAppointment();
        String auxdate = p.getDate();
        int id = p.getID();
        String[] rowData = {name, hour, state, auxdate, String.valueOf(id)};

        tb.addRow(rowData);

    }

    public void displayAppointment(Person person) {

        if (person.getID() != 0) {
            try {
                idText.setText(String.valueOf(person.getID()));
                searchComboBox.setSelectedItem(person.getName());
                hourComboBox.setSelectedItem(person.getHour());
                stateComboBox.setSelectedItem(person.getStateAppointment());
                Date date = dFormat.parse(person.getDate());

            } catch (ParseException ex) {
                Logger.getLogger(Patients.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error");
        }
    }

    public int autoId() {
        int size = d.lastAppointmenID();
        size++;
        return size;
    }

    public void clearTxt() {
        searchComboBox.setSelectedIndex(-1);
        hourComboBox.setSelectedIndex(-1);
        stateComboBox.setSelectedIndex(-1);
        dateChooser.setDate(null);

    }

    public Person createApointment(Person p) {

        String date = dFormat.format(dateChooser.getDate());

        p.setID(Integer.parseInt(idText.getText()));
        p.setHour((String) hourComboBox.getSelectedItem());
        p.setName((String) searchComboBox.getSelectedItem());
        p.setStateAppointment((String) stateComboBox.getSelectedItem());
        p.setDate(date);

        return p;

    }

    public boolean isValidAppointment() {
        boolean valid = false;
        if (searchComboBox.getSelectedIndex() != -1) {
            if (hourComboBox.getSelectedIndex() != -1) {
                if (stateComboBox.getSelectedIndex() != -1) {
                    if (dateChooser.getDate() != null) {

                        valid = true;

                    } else {
                        JOptionPane.showMessageDialog(null, "Error en Fecha de cita.");
                        dateChooser.requestFocusInWindow();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error en Estado de cita.");
                    stateComboBox.requestFocusInWindow();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error en Hora.");
                hourComboBox.requestFocusInWindow();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error en Nombre del paciente.");
            searchComboBox.requestFocusInWindow();
        }

        return valid;
    }


    private void idTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTextActionPerformed

    private void stateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stateComboBoxActionPerformed

    private void hourComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hourComboBoxActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:

        String auxId = String.valueOf(autoId());
        idText.setText(auxId);
        try {
            if (isValidAppointment() == true) {
                Date date = dateChooser.getDate();
                String dateFromDateChooser = dFormat.format(dateChooser.getDate());
                String aux = dateFromDateChooser;
                String hours = (String) hourComboBox.getSelectedItem();
                if (d.verifyAppointment(dateFromDateChooser, hours) == true) {
                    Person p = new Person();
                    fillRows((String) searchComboBox.getSelectedItem(),
                            (String) hourComboBox.getSelectedItem(),
                            (String) stateComboBox.getSelectedItem(),
                            dFormat.format(dateChooser.getDate()),
                            Integer.parseInt(idText.getText()));

                    JOptionPane.showMessageDialog(null, "Guardado con éxito.");
                    d.newAppointment(createApointment(p));
                    clearTxt();
                } else {
                    JOptionPane.showMessageDialog(null, "Imposible realizar cita, por favor verifique su horario");
                    stateComboBox.setSelectedItem("Inactivo");

                }
            }

        } catch (NullPointerException e) {

            JOptionPane.showMessageDialog(this, "Ingresa una fecha valida", "Error.", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Datos incorrectos.");
        }
    }//GEN-LAST:event_btnSaveActionPerformed
    ///Mostrar en pantalla la tabla
    private void jTappointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTappointmentMouseClicked
        // TODO add your handling code here:
        btnUpdate.setEnabled(true);
        btnSave.setEnabled(false);

        dateChooser.setEnabled(true);
        hourComboBox.setEnabled(true);
        stateComboBox.setEnabled(true);

        searchComboBox.setSelectedItem((String) jTappointment.getValueAt(jTappointment.getSelectedRow(), 0));
        hourComboBox.setSelectedItem(jTappointment.getValueAt(jTappointment.getSelectedRow(), 1));
        stateComboBox.setSelectedItem(jTappointment.getValueAt(jTappointment.getSelectedRow(), 2));
        //dateChooser.setDateFormatString((String)jTappointment.getValueAt(jTappointment.getSelectedRow(), 3));
        idText.setText((String) jTappointment.getValueAt(jTappointment.getSelectedRow(), 4));


    }//GEN-LAST:event_jTappointmentMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        String.valueOf(idText.getText());
        int auxId = Integer.valueOf(idText.getText());
        try {
            //JOptionPane.showMessageDialog(null, "Datos insuficientes para actualizar.");
            if (isValidAppointment() == true) {
                String dateFromDateChooser = dFormat.format(dateChooser.getDate());
                String aux = dateFromDateChooser;
                String hours = (String) hourComboBox.getSelectedItem();
                if (d.availableModification(aux, hours, auxId) == true) {
                    Person p = new Person();
                    tb.setValueAt(searchComboBox.getSelectedItem(), jTappointment.getSelectedRow(), 0);
                    tb.setValueAt(hourComboBox.getSelectedItem(), jTappointment.getSelectedRow(), 1);
                    tb.setValueAt(stateComboBox.getSelectedItem(), jTappointment.getSelectedRow(), 2);
                    tb.setValueAt(dFormat.format(dateChooser.getDate()), jTappointment.getSelectedRow(), 3);
                    d.modifyAppointment(createApointment(p));

                    JOptionPane.showMessageDialog(null, "Modificado con éxito.");
                    clearTxt();
                } else {
                    JOptionPane.showMessageDialog(null, "Imposible actualizar, revisar hora de la cita.");
                }
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Debe haber una fecha para la cita.");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:

        if (jTappointment.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Datos insuficientes para cancelar.");
        } else {
            tb.removeRow(jTappointment.getSelectedRow());
            d.deleteAppointment((Integer.parseInt(idText.getText())));

        }
        clearTxt();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        Navigation navigationWindow;
        navigationWindow = new Navigation(uType);
        navigationWindow.show();
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        btnSave.setEnabled(true);
        btnCancel.setEnabled(true);
        btnUpdate.setEnabled(false);
        dateChooser.setEnabled(true);
        hourComboBox.setEnabled(true);
        stateComboBox.setEnabled(true);
        btnClose.setEnabled(true);
        searchComboBox.setEnabled(true);
        clearTxt();
        idText.setText(String.valueOf(autoId()));

    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);
        btnUpdate.setEnabled(false);

        dateChooser.setDate(null);
        idText.setText(" ");
        hourComboBox.setSelectedIndex(-1);
        stateComboBox.setSelectedIndex(-1);
        dateChooser.setEnabled(false);
        idText.setEnabled(false);
        hourComboBox.setEnabled(false);
        searchComboBox.setEnabled(false);
        searchComboBox.setSelectedIndex(-1);
        stateComboBox.setEnabled(false);
        btnClose.setEnabled(false);

    }//GEN-LAST:event_btnCloseActionPerformed

    private void searchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Appointments().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JComboBox<String> hourComboBox;
    private javax.swing.JTextField idText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTappointment;
    private javax.swing.JComboBox<String> searchComboBox;
    private javax.swing.JComboBox<String> stateComboBox;
    // End of variables declaration//GEN-END:variables
}
